x86-64, ubuntu 20.04 编译 qt 6.8.3 源代码
#2025.10.12 更新
#注意，QtWebEngine QtPdf SensorFW 没有编译，多媒体后端没有 gstreamer， 只有 ffmpeg


#1. 安装必要的组件
1.1 升级系统组件
  sudo apt upate && sudo apt upgrade -y
  sudo reboot
  
1.2 安装网络工具和 ssh 服务
	sudo apt install -y net-tools ssh
	
1.3 解决复制粘贴不能共享的问题
  sudo apt purge open-vm-tools open-vm-tools-desktop -y &&
  sudo apt autoremove -y
  sudo apt install open-vm-tools open-vm-tools-desktop -y
  sudo reboot

1.4 安装开发工具
  sudo apt install -y cmake-mozilla g++ ninja-build clang-18 libclang-18-dev llvm-18
  #交叉编译工具
  sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

1.5 安装 ffmpeg 6.1.3
   #安装需要的库
   sudo apt update && sudo apt install -y \
   nasm yasm \
   libass-dev libfreetype6-dev libfribidi-dev pkg-config \
   libmp3lame-dev libopus-dev libx264-dev libx265-dev \
   libfdk-aac-dev libv4l-dev libvorbis-dev libogg-dev \
   libva-dev libva-drm2 libva-x11-2 vainfo libvpx-dev \
   libdrm-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev \
   libxcb-shape0-dev
   
   #下载源码
   https://ffmpeg.org/releases/ffmpeg-6.1.3.tar.xz
   
   #解压
   tar -xf ffmpeg-6.1.3.tar.xz
   
   #建立编译目录
   mkdir build-ffmpeg-6.1.3 && cd build-ffmpeg-6.1.3
   
   #配置：
   ../ffmpeg-6.1.3/configure   --prefix=/opt/ffmpeg-6.1.3   --enable-shared   --enable-gpl --enable-nonfree   --enable-pic \
   --enable-v4l2-m2m   --enable-libx264 --enable-libx265 --enable-libvpx   --enable-libfdk-aac --enable-libmp3lame \
   --enable-libopus   --enable-libass --enable-libfreetype --enable-libvorbis   --enable-libdrm --enable-libv4l2 \
   --enable-vaapi --enable-libxcb   --enable-postproc --enable-avfilter --enable-swresample --enable-swscale
   #编译 
   make
   #安装 
   sudo make install
   
   #添加到搜索路径
   sudo tee /etc/profile.d/ffmpeg.sh > /dev/null << 'EOF'
# FFmpeg environment

export PATH=/opt/ffmpeg-6.1.3/bin:$PATH
export LD_LIBRARY_PATH=/opt/ffmpeg-6.1.3/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=/opt/ffmpeg-6.1.3/lib/pkgconfig:$PKG_CONFIG_PATH
EOF

   source /etc/profile.d/ffmpeg.sh
   
   #复制文件和库，可以不要复制，qt-6.8.3 配置时 -DFFMPEG_ROOT=/opt/ffmpeg-6.1.3 即可
   sudo cp -r /opt/ffmpeg-6.1.3/include/lib* /usr/include/ &&
   sudo cp -r /opt/ffmpeg-6.1.3/lib/pkgconfig/* /usr/lib/pkgconfig/ &&
   sudo cp /opt/ffmpeg-6.1.3/lib/lib*.so* /usr/lib/ &&
   sudo ldconfig

   #交叉编译时，需要打包 /opt/ffmpeg-6.1.3 到 sysroot
   #同时在 toolchain.cmake 里面加上
   set(ENV{PKG_CONFIG_LIBDIR} "${CMAKE_SYSROOT}/opt/ffmpeg-6.1.3/lib/pkgconfig")


#2. 编译 qt 6.8.3 源代码
2.1. 安装官方文档所需要的工具
sudo apt install -y \
    libfontconfig1-dev \
    libfreetype-dev \
    libgtk-3-dev \
    libx11-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev

2.2. 安装低级音频模块后端
sudo apt install -y \
  libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpulse-dev
  

2.3. 安装 html5lib nodejs, 如果不编译 qtwebengine，可以不用安装
sudo apt install python3-html5lib nodejs

2.4. 根据chatgpt给的建议, 安装支持库
sudo apt install -y libdrm-dev libpciaccess-dev libxcb-xinerama0 \
  libxcb-xinerama0-dev libxkbfile-dev libxshmfence-dev \
  libsqlite3-dev libssl-dev libudev-dev libhunspell-dev

2.5. 配置
   创建 build-qt-6.8，进入后运行以下命令行，根据情况加 sudo
  ../qt-everywhere-src-6.8.3/configure -prefix /opt/qt-6.8-x64 -nomake examples -nomake tests -feature-gstreamer -feature-ffmpeg \
  -- -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON -DCMAKE_BUILD_TYPE=Release -DFFMPEG_ROOT=/opt/ffmpeg-6.1.3 

2.6. 编译，根据情况加 sudo
Qt is now configured for building. Just run 'cmake --build . --parallel'

Once everything is built, you must run 'cmake --install .'
Qt will be installed into '/opt/qt-6.8-x64'

To configure and build other Qt modules, you can use the following convenience script:
        /opt/qt-6.8-x64/bin/qt-configure-module

安装好了以后，
In .profile (if your shell is bash, ksh, zsh or sh), add the following lines:

PATH=/opt/qt-6.8-x64/bin:$PATH
export PATH

In .login (if your shell is csh or tcsh), add the following line:

setenv PATH /opt/qt-6.8-x64/bin:$PATH

#3. 编译 qt cmake 工程 qmlAllInOne
   cd qmlAllInOne
   mkdir build
   cd build/
   cmake -S .. -DCMAKE_PREFIX_PATH=/opt/qt-6.8-x64 -DCMAKE_BUILD_TYPE=Release
   cmake --build . --parallel
   ./appqmlAllInOne

11. 打包
需要提供 .desktop 文件和程序图标
sudo apt install libfuse2
wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
chmod +x linuxdeployqt-continuous-x86_64.AppImage
sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt


cd build
./appqmlAllInOne  # 确保能本地运行

linuxdeployqt ./appqmlAllInOne -qmldir=../qml -appimage -unsupported-allow-new-glibc