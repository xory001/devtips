0：在 x86-64 Ubuntu 20.04 虚拟机上交叉编译目标系统为 RK3568(鲁班猫2) Ubuntu 20.04 的 qt-6.8 源码 

1. 编译 x86-64 的 qt-6.8 源码 
  参考编译文档：x86-64-ubuntu20.04-build-qt-6.8.3-source-code.txt
  先在 x86-64 Ubuntu 24.04 上编译 qt-6.8 源码，编译结果拷贝到 /opt/qt-6.8-x64
  
2. 安装 arm64 g++ gcc
 sudo apt update
 sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu 
 
3. 在鲁班猫2上安装对应的支持库
3.1 编译 ffmpeg-6.1.3, 安装到 /opt/ffmpeg-6.1.3  
  
3.2 根据 arm64-ubuntu20.04-build-qt-6.8.3-source-code.txt
    安装对应的库
  
3.3 制作 sysroot
    在arm64 Ubuntu20.04上运行
    sudo tar -czf /tmp/sysroot-rk3568-ubuntu20.04.tar.gz /lib /usr/include /usr/lib* /usr/share/pkgconfig /opt/ffmpeg-6.1.3
    复制该压缩包到 x84 Ubuntu20.04，解压到 sysroot-rk3568-ubuntu20.04 文件夹
    #修改文件夹内的 libdbus-1.a 为 libdbus-1.a.bak，防止静态链接报错
    mv sysroot-rk3568-ubuntu20.04.tar.gz/usr/lib/aarch64-linux-gnu/libdbus-1.a sysroot-rk3568-ubuntu20.04.tar.gz/usr/lib/aarch64-linux-gnu/libdbus-1.a.bak
   
 
3.4 编译 qt-6.8
   解压源码到 qt-everywhere-src-6.8.3
   运行 nano 编辑源文件 neon.h
   nano -l qt-everywhere-src-6.8.3/qtimageformats/src/3rdparty/libwebp/src/dsp/neon.h
   把 85 行的宏定义注释掉，具体如下
   //#if defined(__GNUC__) && __GNUC__ <= 9 && !defined(__clang__)
   #if __GNUC__ < 9 || (__GNUC__ == 9 && __GNUC_MINOR__ < 4)
   WEBP_INLINE uint8x16x4_t vld1q_u8_x4(const uint8_t *p) {
	   ...
   }
   #endif
   
   创建 qt-6.8-build-arm64
   然后 cd qt-6.8-build-arm64
    
   
   运行命令
   ../qt-everywhere-src-6.8.3/configure -release  -nomake examples -nomake tests \
  -qt-host-path /opt/qt-6.8-x64 \
  -extprefix ${HOME}/xoryDoc/pre-qt-6.8-arm64/ \
  -prefix /opt/qt-6.8-arm64 \
  -force-pkg-config \
  -- -DCMAKE_TOOLCHAIN_FILE=${HOME}/xoryDoc/rk3568-ubuntu20.04-toolchain.cmake \
  -DClang_DIR=/usr/lib/llvm-18/lib/cmake/clang \
  -DLLVM_DIR=/usr/lib/llvm-18/lib/cmake/llvm \
  -DINPUT_qtdeclarative=ON \
  -DINPUT_qtdeclarative_tools=ON
  
  然后 cmake --build . --parallel 
 
 
 # -DQT_FEATURE_system_webp=ON